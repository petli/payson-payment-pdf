#!/usr/bin/env python3
# Hey Emacs, this is -*-python-*-

# payson2pdf: translate a CSV report from Swish into PDFs

import sys
import os
import argparse
import csv
import re

import fpdf

excel_escape_re = re.compile('^="(.*)"$')

pdf_fields = {
    'sv': (('date', 'Datum:'),
           ('type', 'Typ:'),
           ('status', 'Status:'),
           ('payson ref.', 'Payson referens:'),
           ('reference', 'Egen referens:'),
           ('sender', 'Avsändare:'),
           ('receiver', 'Mottagare:'),
           ('description', 'Beskrivning:'),
           ('amount', 'Belopp:'),
           ('vat (articles)', 'Moms (artiklar):'),
           ('fee', 'Avgift:'),
           ('vat (fee)', 'Moms (avgift):'),
           ('change', 'Saldoändring:'),
           ('balance', 'Nytt saldo:'),
           ('currency', 'Valuta:'),
       )
}

parser = argparse.ArgumentParser(description = 'Translate Payson CSV report into PDFs')
parser.add_argument('-o', '--output-dir', default = '.',
                    help = 'Output directory for the files, default is current directory.')
parser.add_argument('-e', '--encoding', default = 'UTF-8',
                    help = 'Input file text encoding, default UTF-8.')
parser.add_argument('-r', '--replace', action = 'store_true',
                    help = 'Replace any existing PDF files.')
parser.add_argument('input_files', metavar = 'CSV', nargs = '*',
                    help = 'Files to process. If none are provided, stdin is read.')

def main():
    args = parser.parse_args()

    if args.input_files:
        input_files = [open(fname, mode = 'rt', newline = '', encoding = args.encoding)
                       for fname in args.input_files]
    else:
        input_files = [sys.stdin]

    for f in input_files:
        translate_csv(csv.reader(f, delimiter = ';', skipinitialspace = True), args)

def translate_csv(csv_input, args):
    header = None
    for row in csv_input:
        if header is None:
            header = [h.lower() for h in row]
        else:
            values = {}
            for i, field in enumerate(header):
                if field:
                    values[field] = strip_escape(row[i])

            generate_pdf(values, args)


def strip_escape(data):
    """Remove any ="xyz" Excel style escaping."""
    m = excel_escape_re.match(data)
    if m:
        return m.group(1)
    else:
        return data



def generate_pdf(values, args, language = 'sv'):
    pdf = fpdf.FPDF('P', 'mm', 'A4')
    pdf.add_page()
    pdf.set_font('Arial', 'B', 18)
    pdf.cell(0, 10, 'Paysonbetalning', align= 'C', border = 'B')
    pdf.ln()

    for field, description in pdf_fields[language]:
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(60, 10, description)
        pdf.set_font('Arial', '', 14)
        pdf.multi_cell(0, 8, values[field])

    # In Python3 fpdf 1.7.2 can only output latin-1

    date = values['date'].split()[0]
    refnr = values['payson ref.']
    filename = 'payson_{}_{}.pdf'.format(date, refnr)
    path = os.path.join(args.output_dir, filename)

    if os.path.exists(path) and not args.replace:
        print('not replacing existing {}'.format(path))
        return

    with open(path, 'wt', encoding = 'latin-1') as f:
        print('wrote {}'.format(path))
        f.write(pdf.output(dest = 'S'))


if __name__ == '__main__':
    main()
